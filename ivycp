#!/bin/sh
#
# ivycp  by paul phillips  part of sbt-extras
# https://github.com/paulp/sbt-extras

ivyjar="${IVYJAR:-/usr/local/Cellar/ivy/2.3.0/libexec/ivy-2.3.0.jar}"
dir="$(mktemp -dt ivycp)"
build="$dir/build.xml"
program="$(basename $0)"

[[ -f "$ivyjar" ]] || {
  echo "Error: can't find ivy.jar. You must set IVYCP to the path."
  exit 1
}

[[ $# -gt 0 ]] || {
  cat <<EOM
Usage: $program [dependency dependency ...]

Resolves all dependencies through the ivy cache, downloading any required jars.
When complete, echoes a classpath containing all dependencies, including
transitively required ones.  The format for dependencies can be any of

  org%name
  org%name%version
  org;name
  org;name;version

When no version is given, 'latest.release' is assumed.

Examples:

  $program com.typesafe.akka%akka play%play_2.10
  scala -cp \$(ivycp org.scalaz%scalaz-iteratee_2.10) -e 'println(scalaz.iteratee.Iteratee)'
EOM
  exit 0
}

dependencyLine () {
  local org="$1"
  local name="$2"
  local rev="${3:-latest.release}"

cat <<EOM
      <dependency org="$org" name="$name" rev="$rev"/>
EOM
}

dependencyLines () {
  for arg in "$@"; do
    ( IFS=";%" && set -- $arg && dependencyLine "$@" )
  done
}

genBuildXml () {
  cat <<EOM
<?xml version="1.0" encoding="UTF-8"?>
<project name="ivycp" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">
  <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="$ivyjar"/>
  <target name="build">
    <ivy:resolve type="bundle,jar" log="quiet">
$1
    </ivy:resolve>
    <ivy:retrieve symlink="true" log="quiet"/>
  </target>
</project>
EOM
}

genBuildXml "$(dependencyLines "$@")" > "$build"
ant -q -f "$build" >/dev/null
code="$?"
if (( code == 0 )); then
  set -- $(readlink "$dir/lib"/*)
  ( IFS=: && echo "$*" )
else
  echo >&2 "Dependency retrieval failed: $?"
fi

exit "$code"
